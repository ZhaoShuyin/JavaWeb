package com.zsy.datasource.datasource;

import java.sql.Array;
import java.sql.Blob;
import java.sql.CallableStatement;
import java.sql.Clob;
import java.sql.Connection;
import java.sql.DatabaseMetaData;
import java.sql.NClob;
import java.sql.PreparedStatement;
import java.sql.SQLClientInfoException;
import java.sql.SQLException;
import java.sql.SQLWarning;
import java.sql.SQLXML;
import java.sql.Savepoint;
import java.sql.Statement;
import java.sql.Struct;
import java.util.List;
import java.util.Map;
import java.util.Properties;
import java.util.concurrent.Executor;

/**
 * 包装模式：共5步
 * 1.写一个类，让其具有和被包装类相同的行为。即实现和被包装类相同的接口。
 * 2.定义一个变量，用于引用被包装对象。
 * 3.提供一个构造函数，用于传入被包装的对象。	这步就是依赖注入
 * 4.对于需要改写的方法，提供自己的方法实现。
 * 5.对于不需要改写的方法，调用被包装对象原来的方法
 * @author zhy
 *
 * 依赖注入：有一个编程思想
 * Inversion of Control  控制反转
 *
 */
public class MyConnection2 implements Connection {//第一步

	//第二步
	private Connection conn;//它是规范的接口，不是具体的实现类
	private List<Connection> pool;


	//第三步
	public MyConnection2(Connection conn,List<Connection> pool){
		this.conn = conn;
		this.pool = pool;
		System.out.println(conn.getClass().getName());
	}

	//第四步
	public void close() throws SQLException {
		pool.add(conn);//实现还回池中
	}

	//第五步
	public <T> T unwrap(Class<T> iface) throws SQLException {
		return conn.unwrap(iface);
	}

	public boolean isWrapperFor(Class<?> iface) throws SQLException {
		return conn.isWrapperFor(iface);
	}

	public Statement createStatement() throws SQLException {
		return conn.createStatement();
	}

	public PreparedStatement prepareStatement(String sql) throws SQLException {
		return conn.prepareStatement(sql);
	}



















	public CallableStatement prepareCall(String sql) throws SQLException {

		return null;
	}


	public String nativeSQL(String sql) throws SQLException {

		return null;
	}


	public void setAutoCommit(boolean autoCommit) throws SQLException {


	}


	public boolean getAutoCommit() throws SQLException {

		return false;
	}


	public void commit() throws SQLException {


	}


	public void rollback() throws SQLException {


	}




	public boolean isClosed() throws SQLException {

		return false;
	}


	public DatabaseMetaData getMetaData() throws SQLException {

		return null;
	}


	public void setReadOnly(boolean readOnly) throws SQLException {


	}


	public boolean isReadOnly() throws SQLException {

		return false;
	}


	public void setCatalog(String catalog) throws SQLException {


	}


	public String getCatalog() throws SQLException {

		return null;
	}


	public void setTransactionIsolation(int level) throws SQLException {


	}


	public int getTransactionIsolation() throws SQLException {

		return 0;
	}


	public SQLWarning getWarnings() throws SQLException {

		return null;
	}


	public void clearWarnings() throws SQLException {


	}


	public Statement createStatement(int resultSetType, int resultSetConcurrency)
			throws SQLException {

		return null;
	}


	public PreparedStatement prepareStatement(String sql, int resultSetType,
											  int resultSetConcurrency) throws SQLException {

		return null;
	}


	public CallableStatement prepareCall(String sql, int resultSetType,
										 int resultSetConcurrency) throws SQLException {

		return null;
	}


	public Map<String, Class<?>> getTypeMap() throws SQLException {

		return null;
	}


	public void setTypeMap(Map<String, Class<?>> map) throws SQLException {


	}


	public void setHoldability(int holdability) throws SQLException {


	}


	public int getHoldability() throws SQLException {

		return 0;
	}


	public Savepoint setSavepoint() throws SQLException {

		return null;
	}


	public Savepoint setSavepoint(String name) throws SQLException {

		return null;
	}


	public void rollback(Savepoint savepoint) throws SQLException {


	}


	public void releaseSavepoint(Savepoint savepoint) throws SQLException {


	}


	public Statement createStatement(int resultSetType,
									 int resultSetConcurrency, int resultSetHoldability)
			throws SQLException {

		return null;
	}


	public PreparedStatement prepareStatement(String sql, int resultSetType,
											  int resultSetConcurrency, int resultSetHoldability)
			throws SQLException {

		return null;
	}


	public CallableStatement prepareCall(String sql, int resultSetType,
										 int resultSetConcurrency, int resultSetHoldability)
			throws SQLException {

		return null;
	}


	public PreparedStatement prepareStatement(String sql, int autoGeneratedKeys)
			throws SQLException {

		return null;
	}


	public PreparedStatement prepareStatement(String sql, int[] columnIndexes)
			throws SQLException {

		return null;
	}


	public PreparedStatement prepareStatement(String sql, String[] columnNames)
			throws SQLException {

		return null;
	}


	public Clob createClob() throws SQLException {

		return null;
	}


	public Blob createBlob() throws SQLException {

		return null;
	}


	public NClob createNClob() throws SQLException {

		return null;
	}


	public SQLXML createSQLXML() throws SQLException {

		return null;
	}


	public boolean isValid(int timeout) throws SQLException {

		return false;
	}


	public void setClientInfo(String name, String value)
			throws SQLClientInfoException {


	}


	public void setClientInfo(Properties properties)
			throws SQLClientInfoException {


	}


	public String getClientInfo(String name) throws SQLException {

		return null;
	}


	public Properties getClientInfo() throws SQLException {

		return null;
	}


	public Array createArrayOf(String typeName, Object[] elements)
			throws SQLException {

		return null;
	}


	public Struct createStruct(String typeName, Object[] attributes)
			throws SQLException {

		return null;
	}


	public void setSchema(String schema) throws SQLException {


	}


	public String getSchema() throws SQLException {

		return null;
	}


	public void abort(Executor executor) throws SQLException {


	}


	public void setNetworkTimeout(Executor executor, int milliseconds)
			throws SQLException {


	}


	public int getNetworkTimeout() throws SQLException {

		return 0;
	}

}
